---
title: "In-class_Ex07"
author: "Enrico Limberg"
---

# 1.0 Getting Started

```{r}
pacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)
```

## **1.1 Importing the data**

```{r}
ts_data <- read_csv("data/visitor_arrivals_by_air.csv")
```

```{r}
ts_data$'Month-Year' <- dmy(
  ts_data$'Month-Year')
```

## **1.2 Conventional base ts object versus tibble object**

```{r}
ts_data
```

## **1.3 Conventional base ts object versus tibble object**

```{r}
ts_data_ts <- ts(ts_data)
head(ts_data_ts)
```

## **1.4 Converting tibble object to tsibble object**

```{r}
ts_tsibble <- ts_data %>%
  mutate(Month = yearmonth(`Month-Year`)) %>%
  as_tsibble(index = `Month`)
```

## **1.5 tsibble object**

```{r}
ts_tsibble
```

# **2.0 Visualising Time-series Data**

```{r}
ts_longer <- ts_data %>%
  pivot_longer(cols = c(2:34),
               names_to = "Country",
               values_to = "Arrivals")
```

## **2.1 Visualising single time-series: ggplot2 methods**

```{r}
ts_longer %>%
  filter(Country == "Malaysia") %>%
  ggplot(aes(x = `Month-Year`, 
             y = Arrivals))+
  geom_line(size = 0.5)
```

## **2.2 Plotting multiple time-series data with ggplot2 methods**

```{r, fig.width=10, fig.height=10}
ggplot(data = ts_longer, 
       aes(x = `Month-Year`, 
           y = Arrivals,
           color = Country))+
  geom_line(size = 0.5) +
  theme(legend.position = "bottom", 
        legend.box.spacing = unit(0.5, "cm"))
```

To provide effective comparison, [**facet_wrap()**]{.underline} of **ggplot2** package is used to create small multiple line graph

```{r, fig.width=7, fig.height=12}
ggplot(data = ts_longer, 
       aes(x = `Month-Year`, 
           y = Arrivals))+
  geom_line(size = 0.5) +
  facet_wrap(~ Country,
             ncol = 3,
             scales = "free_y") +
  theme_bw()
```

# **3.0 Visual Analysis of Time-series Data**

```{r}
tsibble_longer <- ts_tsibble %>%
  pivot_longer(cols = c(2:34),
               names_to = "Country",
               values_to = "Arrivals")
```

## **3.1 Visual Analysis of Seasonality with Seasonal Plot**

```{r}
tsibble_longer %>%
  filter(Country == "Italy" |
         Country == "Vietnam" |
         Country == "United Kingdom" |
         Country == "Germany") %>% 
  gg_season(Arrivals)
```

## **3.2 Visual Analysis of Seasonality with Cycle Plot**

```{r}
tsibble_longer %>%
  filter(Country == "Vietnam" |
         Country == "Italy") %>% 
  autoplot(Arrivals) + 
  facet_grid(Country ~ ., scales = "free_y")
```

```{r, fig.width=8, fig.height=6}
tsibble_longer %>%
  filter(Country == "Vietnam" |
         Country == "Italy") %>% 
  gg_subseries(Arrivals)
```

# **4.0 Time series decomposition**

## **4.1 Single time series decomposition**

[**ACF()**]{.underline} of **feasts** package is used to plot the ACF curve of visitor arrival from Vietnam.

```{r}
tsibble_longer %>%
  filter(`Country` == "Vietnam") %>%
  ACF(Arrivals) %>% 
  autoplot()
```

[**PACF()**]{.underline} of **feasts** package is used to plot the Partial ACF curve of visitor arrival from Vietnam.

```{r}
tsibble_longer %>%
  filter(`Country` == "Vietnam") %>%
  PACF(Arrivals) %>% 
  autoplot()
```

## **4.2 Multiple time-series decomposition**

```{r, fig.height=6}
tsibble_longer %>%
  filter(`Country` == "Vietnam" |
         `Country` == "Italy" |
         `Country` == "United Kingdom" |
         `Country` == "China") %>%
  ACF(Arrivals) %>%
  autoplot()
```

```{r}
tsibble_longer %>%
  filter(`Country` == "Vietnam" |
         `Country` == "Italy" |
         `Country` == "United Kingdom" |
         `Country` == "China") %>%
  PACF(Arrivals) %>%
  autoplot()
```

# **5.0 Visual STL Diagnostics**

## 5.1 Visual STL diagnostics with feasts

```{r, fig.height=6}
tsibble_longer %>%
  filter(`Country` == "Vietnam") %>%
  model(stl = STL(Arrivals)) %>%
  components() %>%
  autoplot()
```

## **5.2 Classical Decomposition with feasts**

```{r, fig.height=6, warning=FALSE}
tsibble_longer %>%
  filter(`Country` == "Vietnam") %>%
  model(
    classical_decomposition(
      Arrivals, type = "additive")) %>%
  components() %>%
  autoplot()
```

# 6.0 Visual Forecasting

## 6.1 Time Series Data Sampling

```{r}
vietnam_ts <- tsibble_longer %>%
  filter(Country == "Vietnam") %>% 
  mutate(Type = if_else(
    `Month-Year` >= "2019-01-01", 
    "Hold-out", "Training"))
```

```{r}
vietnam_train <- vietnam_ts %>%
  filter(`Month-Year` < "2019-01-01")
```

## **6.2 Exploratory Data Analysis (EDA): Time Series Data**

```{r, fig.height = 6}
vietnam_train %>%
  model(stl = STL(Arrivals)) %>%
  components() %>%
  autoplot()
```

## **6.3 Fitting forecasting models**

### 6.3.1 Fitting Exponential Smoothing State Space (ETS) Models: fable methods

### 6.3.2 Fitting a simple exponential smoothing (SES)

```{r}
fit_ses <- vietnam_train %>%
  model(ETS(Arrivals ~ error("A") 
            + trend("N") 
            + season("N")))
fit_ses
```

### 6.3.3 Examine Model Assumptions

```{r}
gg_tsresiduals(fit_ses)
```

### 6.3.4 The model details

```{r}
fit_ses %>%
  report()
```

### 6.3.5 Trend methods

```{r}
vietnam_H <- vietnam_train %>%
  model(`Holt's method` = 
          ETS(Arrivals ~ error("A") +
                trend("A") + 
                season("N")))
vietnam_H %>% report()
```

### 6.3.6 Damped Trend Methods

```{r}
vietnam_HAd <- vietnam_train %>%
  model(`Holt's method` = 
          ETS(Arrivals ~ error("A") +
                trend("Ad") + 
                season("N")))
vietnam_HAd %>% report()
```

### 6.3.7 Checking for results

```{r}
gg_tsresiduals(vietnam_H)
```

```{r}
gg_tsresiduals(vietnam_HAd)
```

### 6.3.8 **Fitting ETS Methods with Season: Holt-Winters**

```{r}
Vietnam_WH <- vietnam_train %>%
  model(
    Additive = ETS(Arrivals ~ error("A") 
                   + trend("A") 
                   + season("A")),
    Multiplicative = ETS(Arrivals ~ error("M") 
                         + trend("A") 
                         + season("M"))
    )

Vietnam_WH %>% report()
```

### 6.3.9 **Fitting multiple ETS Models**

```{r}
fit_ETS <- vietnam_train %>%
  model(`SES` = ETS(Arrivals ~ error("A") + 
                      trend("N") + 
                      season("N")),
        `Holt`= ETS(Arrivals ~ error("A") +
                      trend("A") +
                      season("N")),
        `damped Holt` = 
          ETS(Arrivals ~ error("A") +
                trend("Ad") + 
                season("N")),
        `WH_A` = ETS(
          Arrivals ~ error("A") + 
            trend("A") + 
            season("A")),
        `WH_M` = ETS(Arrivals ~ error("M") 
                         + trend("A") 
                         + season("M"))
  )
```

### 6.3.10 Model efficient

```{r}
fit_ETS %>%
  tidy()
```

### 6.3.11 Step 4: Model Comparison

```{r}
fit_ETS %>% 
  report()
```

### 6.3.12 Step 5: Forecasting future values

```{r}
fit_ETS %>%
  forecast(h = "12 months") %>%
  autoplot(vietnam_ts, 
           level = NULL)
```
