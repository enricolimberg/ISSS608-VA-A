---
title: "Take-home_Ex3"
author: "Enrico Limberg"
date: "March 20, 2025"
date-modified: "last-modified"
execute:
    echo: true
    eval: true
    warning: false
    freeze: true
---

# Prototyping Modules for Visual Analytics Shiny Application

# 1.0 Install and Load R packages

```{r}
pacman::p_load(tidyverse,tsibble,feasts,fable,seasonal,tidymodels,timetk,modeltime,forecast,ggplot2,tidyr,dplyr,lubridate,tsibble)
```

# 2.0 Import Data

```{r}
weather <- read_csv("data/weather.csv")
```

```{r}
glimpse(weather)
```

# 3.0 Data Wrangling

## 3.1 Convert year, month, and day into single date column

```{r}
weather <- weather %>%
  mutate(date = make_date(year, month, day)) %>%
  arrange(date)
```

## 3.2 Remove missing values

```{r}
weather <- weather %>% 
  drop_na()
```

## 3.3 Convert to time-series format

```{r}
ts_data <- weather %>%
  as_tsibble(index = date, key = station) %>%
  fill_gaps()
```

```{r}
ts_data
```

```{r}
write_csv(ts_data, "ts_data.csv")
```

## 3.4 Convert to time-series (weekly aggregation)

```{r}
ts_data_weekly <- weather %>%
  as_tsibble(index = date, key = station) %>%
  fill_gaps() %>%
  mutate(week = floor_date(date, "week")) %>%
  group_by(station, week) %>%
  summarise(
    mean_temp = mean(mean_temperature_c, na.rm = TRUE), 
    max_temp = if_else(any(!is.na(mean_temperature_c)), max(mean_temperature_c, na.rm = TRUE), NA_real_),    
    min_temp = if_else(any(!is.na(mean_temperature_c)), min(mean_temperature_c, na.rm = TRUE), NA_real_),
    total_rainfall = sum(daily_rainfall_total_mm, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  distinct(station, week, .keep_all = TRUE) %>%
  as_tsibble(index = week, key = station)
```

```{r}
ts_data_weekly$mean_temp[is.nan(ts_data_weekly$mean_temp)] <- NA
```

```{r}
ts_data_weekly
```

```{r}
write_csv(ts_data_weekly, "ts_data_weekly.csv")
```

# 4.0 Time-Series Visualization

## 4.1 Single time-series (daily)

```{r}
ts_data %>%
  filter(station == "Paya Lebar") %>%
  ggplot(aes(x = date,
             y = mean_temperature_c))+
  geom_line(size = 0.5)
```

## 4.2 Time Series (Weekly)

```{r}
ts_data_weekly %>%
  filter(station == "Paya Lebar") %>%
  ggplot(aes(x = week,
             y = mean_temp))+
  geom_line(size = 0.5)
```

## 4.3 Multiple time-series

```{r, fig.height=6}
ggplot(data = ts_data,
       aes(x = date,
           y = mean_temperature_c,
           color = station))+
  geom_line(size = 0.5) +
  theme(legend.position = "bottom",
        legend.box.spacing = unit(0.5, "cm"))+
  labs(title = "Mean Temperature Over Time", y = "Temperature (°C)")
```

```{r,fig.height=6}
ggplot(data = ts_data_weekly,
       aes(x = week,
           y = mean_temp,
           color = station))+
  geom_line(size = 0.5) +
  theme(legend.position = "bottom",
        legend.box.spacing = unit(0.5, "cm"))+
  labs(title = "Mean Temperature Over Time (Weekly)", y = "Temperature (°C)")
```

## 4.4 facet_wrap() for effective comparison of multiple line graph

```{r,fig.height=10}
ggplot(data = ts_data, 
       aes(x = date, 
           y = mean_temperature_c))+
  geom_line(size = 0.5) +
  facet_wrap(~ station,
             ncol = 3,
             scales = "free_y") +
  theme_bw()
```

# 5.0 Visual Analysis of Time-series data

## 5.1 Seasonality with seasonal plot

```{r}
ts_data %>%
  filter(station == "Admiralty" |
         station == "Paya Lebar" |
         station == "Clementi" |
         station == "Changi") %>% 
  fill_gaps() %>%
  gg_season(mean_temperature_c)+
  labs(title = "Seasonal Plot", y = "Temperature (°C)")
```

## 5.2 Cycle Plot

```{r}
ts_data %>%
  filter(station == "Admiralty" |
         station == "Changi") %>% 
  autoplot(mean_temperature_c) + 
  facet_grid(station ~ ., scales = "free_y")
```

```         
```

# 6.0 Time series decomposition

## 6.1 ACF plot of Daily Mean Temperature

```{r}
ts_data %>%
  filter(station == "Changi") %>%
  ACF(mean_temperature_c) %>%
  autoplot()
```

## 6.2 PACF plot of Daily Mean Temperature

```{r}
ts_data %>%
  filter(station == "Changi") %>%
  PACF(mean_temperature_c) %>%
  autoplot()
```

# 7.0 STL Decomposition

```{r}
ts_data <- ts_data %>%
  fill_gaps() %>%
  mutate(mean_temperature_c = na.interp(mean_temperature_c))
```

```{r}
ts_data %>% count(is.na(mean_temperature_c))
```

```{r,fig.height=6}
ts_data %>%
  filter(!is.na(mean_temperature_c)) %>%
  model(STL(mean_temperature_c ~ season(window = "periodic"))) %>%
  components() %>%
  autoplot()
```

# 8.0 Visual Forecasting

## 8.1 Data Sampling

```{r}
Changi_ts <- ts_data %>%
  filter(station == "Changi") %>% 
  mutate(Type = if_else(
    date >= "2024-10-01", 
    "Hold-out", "Training"))
```

```{r}
Changi_train <- Changi_ts %>%
  filter(date < "2024-10-01")
```

```{r}
Changi_train %>% fill_gaps()
```

```{r,fig.height=6}
Changi_train_imputed <- Changi_train %>%
  mutate(mean_temperature_c = zoo::na.approx(mean_temperature_c))

Changi_train_imputed %>%
  model(stl = STL(mean_temperature_c)) %>%
  components() %>%
  autoplot()
```

## 8.2 Fitting Forecasting Model

### 8.2.1 Fitting ETS Model

```{r}
ETS(y ~ error(c("A", "M")) 
    + trend(c("N", "A", "Ad")) 
    + season(c("N", "A", "M"))
)
```

### 8.2.2 Fitting simple ETS

```{r}
ses <- Changi_train_imputed %>%
  model(ETS(mean_temperature_c ~ error("A") 
            + trend("N") 
            + season("N")))
ses
```

### 8.2.3 Check model assumptions

```{r,fig.height=6}
gg_tsresiduals(ses)
```

### 8.2.4 Model's report

```{r}
ses %>%
  report()
```

### 8.2.5 Holt's Linear Method

```{r}
Changi_Holt <- Changi_train_imputed %>%
  model(`Holt's method` = 
          ETS(mean_temperature_c ~ error("A") +
                trend("A") + 
                season("N")))
Changi_Holt %>% report()
```

```{r,fig.height=6}
gg_tsresiduals(Changi_Holt)
```

### 8.2.6 Holt-Winters

```{r}
Changi_HW <- Changi_train_imputed %>%
  model(
    Additive = ETS(mean_temperature_c ~ error("A") 
                   + trend("A") 
                   + season("A")),
    Multiplicative = ETS(mean_temperature_c ~ error("M") 
                         + trend("A") 
                         + season("M"))
    )

Changi_HW %>% report()
```

```{r}
multi_ETS <- Changi_train_imputed %>%
  model(`SES` = ETS(mean_temperature_c ~ error("A") + 
                      trend("N") + 
                      season("N")),
        `Holt`= ETS(mean_temperature_c ~ error("A") +
                      trend("A") +
                      season("N")),
        `damped Holt` = 
          ETS(mean_temperature_c ~ error("A") +
                trend("Ad") + 
                season("N")),
        `WH_A` = ETS(
          mean_temperature_c ~ error("A") + 
            trend("A") + 
            season("A")),
        `WH_M` = ETS(mean_temperature_c ~ error("M") 
                         + trend("A") 
                         + season("M"))
  )
```

```{r}
multi_ETS %>%
  tidy()
```

```{r}
multi_ETS %>% 
  report()
```

```{r}
multi_ETS %>%
  forecast(h = "30 days") %>%
  autoplot(Changi_train_imputed, 
           level = NULL)
```

```{r}
fit_autoETS <- Changi_train_imputed %>%
  model(ETS(mean_temperature_c))
fit_autoETS %>% report()
```

```{r, fig.height=6}
gg_tsresiduals(fit_autoETS)
```

### 8.2.7 Forecasting future values

```{r}
fit_autoETS %>%
  forecast(h = "30 days") %>%
  autoplot(Changi_train_imputed)
```

### 8.2.8 **Visualising AutoETS model with ggplot2**

```{r}
fc_autoETS <- fit_autoETS %>%
  forecast(h = "30 days")

Changi_train_imputed %>%
  ggplot(aes(x=`date`, 
             y=mean_temperature_c)) +
  autolayer(fc_autoETS, 
            alpha = 0.6) +
  geom_line(aes(
    color = Type), 
    alpha = 0.8) + 
  geom_line(aes(
    y = .mean, 
    colour = "Forecast"), 
    data = fc_autoETS) +
  geom_line(aes(
    y = .fitted, 
    colour = "Fitted"), 
    data = augment(fit_autoETS))
```

# 9.0 ARIMA Method

## 9.1 Fitting ARIMA model

```{r}
fit_autoARIMA <- Changi_train_imputed %>%
  model(ARIMA(mean_temperature_c))
report(fit_autoARIMA)
```

```{r}
Changi_training <- Changi_train_imputed %>% filter(Type == "Training")
```

```{r}
Changi_multi <- Changi_training %>%
  model(
    ets = ETS(mean_temperature_c),
    arima = ARIMA(mean_temperature_c)
  )
```

```{r}
Changi_multi %>%
  glance()
```

```{r}
Changi_forecast <- Changi_multi %>%
  forecast(h = "30 days")
```

```{r}
Changi_forecast %>%
  autoplot(Changi_training)
```

## 9.2 Multi station ARIMA

```{r, fig.height=20,fig.width=10}
ts_data %>% model(ARIMA(mean_temperature_c)) %>%
  forecast(h = "7 days") %>% 
  autoplot(ts_data)
```
